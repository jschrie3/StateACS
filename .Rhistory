v_names <- as.list(match.call())
if(!(x) && (y)) pattern <- "^y_"
else if((x) && !(y)) pattern <- "^x_"
else pattern <- "^y_|^x_"
names_data <- grep(pattern, colnames(data), value = T)
if(length(names_data) == 0) stop("Dependent variables should begin with 'y_', independent variables with 'x_'")
names_d <- paste(paste0("d",ndiffs), names_data, sep = "_")
data_diff <- data[, `:=`((names_d), (.SD - shift(.SD, ndiffs))),
by = panel,
.SDcols = names_data]
return(v_names)
}
makeDIFFS(test, id, 1)
makeDIFFS <- function(data, panel, ndiffs, x = TRUE, y = TRUE) {
if(!(x) && !(y)) stop("Please select independent and/or dependent variables to difference")
require(data.table)
if(class(data)[1] != "data.table") data <- data.table(data)
#panel <- data$panel
v_names <- as.list(match.call())
if(!(x) && (y)) pattern <- "^y_"
else if((x) && !(y)) pattern <- "^x_"
else pattern <- "^y_|^x_"
names_data <- grep(pattern, colnames(data), value = T)
if(length(names_data) == 0) stop("Dependent variables should begin with 'y_', independent variables with 'x_'")
names_d <- paste(paste0("d",ndiffs), names_data, sep = "_")
#data_diff <- data[, `:=`((names_d), (.SD - shift(.SD, ndiffs))),
#                  by = panel,
#                  .SDcols = names_data]
return(v_names)
}
makeDIFFS(test, id, 1)
x <- makeDIFFS(test, id, 1)
x$panel
makeDIFFS <- function(data, panel, ndiffs, x = TRUE, y = TRUE) {
if(!(x) && !(y)) stop("Please select independent and/or dependent variables to difference")
require(data.table)
if(class(data)[1] != "data.table") data <- data.table(data)
args <- match.call()
panel <- match.call$panel
v_names <- as.list(match.call())
if(!(x) && (y)) pattern <- "^y_"
else if((x) && !(y)) pattern <- "^x_"
else pattern <- "^y_|^x_"
names_data <- grep(pattern, colnames(data), value = T)
if(length(names_data) == 0) stop("Dependent variables should begin with 'y_', independent variables with 'x_'")
names_d <- paste(paste0("d",ndiffs), names_data, sep = "_")
#data_diff <- data[, `:=`((names_d), (.SD - shift(.SD, ndiffs))),
#                  by = panel,
#                  .SDcols = names_data]
return(panel)
}
makeDIFFS(test, id, 1)
x[["panel"]]
makeDIFFS <- function(data, panel, ndiffs, x = TRUE, y = TRUE) {
if(!(x) && !(y)) stop("Please select independent and/or dependent variables to difference")
require(data.table)
if(class(data)[1] != "data.table") data <- data.table(data)
args <- match.call()
panel <- match.call[["panel"]]
v_names <- as.list(match.call())
if(!(x) && (y)) pattern <- "^y_"
else if((x) && !(y)) pattern <- "^x_"
else pattern <- "^y_|^x_"
names_data <- grep(pattern, colnames(data), value = T)
if(length(names_data) == 0) stop("Dependent variables should begin with 'y_', independent variables with 'x_'")
names_d <- paste(paste0("d",ndiffs), names_data, sep = "_")
#data_diff <- data[, `:=`((names_d), (.SD - shift(.SD, ndiffs))),
#                  by = panel,
#                  .SDcols = names_data]
return(panel)
}
makeDIFFS(test, id, 1)
makeDIFFS <- function(data, panel, ndiffs, x = TRUE, y = TRUE) {
if(!(x) && !(y)) stop("Please select independent and/or dependent variables to difference")
require(data.table)
if(class(data)[1] != "data.table") data <- data.table(data)
args <- match.call()
panel <- args[["panel"]]
v_names <- as.list(match.call())
if(!(x) && (y)) pattern <- "^y_"
else if((x) && !(y)) pattern <- "^x_"
else pattern <- "^y_|^x_"
names_data <- grep(pattern, colnames(data), value = T)
if(length(names_data) == 0) stop("Dependent variables should begin with 'y_', independent variables with 'x_'")
names_d <- paste(paste0("d",ndiffs), names_data, sep = "_")
#data_diff <- data[, `:=`((names_d), (.SD - shift(.SD, ndiffs))),
#                  by = panel,
#                  .SDcols = names_data]
return(panel)
}
makeDIFFS(test, id, 1)
makeDIFFS <- function(data, panel, ndiffs, x = TRUE, y = TRUE) {
if(!(x) && !(y)) stop("Please select independent and/or dependent variables to difference")
require(data.table)
if(class(data)[1] != "data.table") data <- data.table(data)
args <- match.call()
panel <- args[["panel"]]
if(!(x) && (y)) pattern <- "^y_"
else if((x) && !(y)) pattern <- "^x_"
else pattern <- "^y_|^x_"
names_data <- grep(pattern, colnames(data), value = T)
if(length(names_data) == 0) stop("Dependent variables should begin with 'y_', independent variables with 'x_'")
names_d <- paste(paste0("d",ndiffs), names_data, sep = "_")
data_diff <- data[, `:=`((names_d), (.SD - shift(.SD, ndiffs))),
by = panel,
.SDcols = names_data]
return(panel)
}
makeDIFFS(test, id, 1)
makeDIFFS <- function(data, panel, ndiffs, x = TRUE, y = TRUE) {
if(!(x) && !(y)) stop("Please select independent and/or dependent variables to difference")
require(data.table)
if(class(data)[1] != "data.table") data <- data.table(data)
args <- match.call()
panel <- args[["panel"]]
if(!(x) && (y)) pattern <- "^y_"
else if((x) && !(y)) pattern <- "^x_"
else pattern <- "^y_|^x_"
names_data <- grep(pattern, colnames(data), value = T)
if(length(names_data) == 0) stop("Dependent variables should begin with 'y_', independent variables with 'x_'")
names_d <- paste(paste0("d",ndiffs), names_data, sep = "_")
data_diff <- data[, `:=`((names_d), (.SD - shift(.SD, ndiffs))),
by = panel,
.SDcols = names_data]
return(data_diff)
}
test <- subset(hours_wages, id < 3)
head(test)
View(test)
test <- makeDIFFS(test, id, 1)
View(test)
makeDIFFS <- function(data, panel, ndiffs, x = TRUE, y = TRUE) {
if(!(x) && !(y)) stop("Please select independent and/or dependent variables to difference")
require(data.table)
if(class(data)[1] != "data.table") data <- data.table(data)
input <- match.call()
if(!(x) && (y)) pattern <- "^y_"
else if((x) && !(y)) pattern <- "^x_"
else pattern <- "^y_|^x_"
names_data <- grep(pattern, colnames(data), value = T)
if(length(names_data) == 0) stop("Dependent variables should begin with 'y_', independent variables with 'x_'")
names_d <- paste(paste0("d",ndiffs), names_data, sep = "_")
data_diff <- data[, `:=`((names_d), (.SD - shift(.SD, ndiffs))),
by = input[["panel"]],
.SDcols = names_data]
return(data_diff)
}
test <- subset(hours_wages, id < 3)
test <- makeDIFFS(test, id, 1)
makeDIFFS <- function(data, panel, ndiffs, x = TRUE, y = TRUE) {
if(!(x) && !(y)) stop("Please select independent and/or dependent variables to difference")
require(data.table)
if(class(data)[1] != "data.table") data <- data.table(data)
input <- match.call()
panel_id <- input[["panel"]]
if(!(x) && (y)) pattern <- "^y_"
else if((x) && !(y)) pattern <- "^x_"
else pattern <- "^y_|^x_"
names_data <- grep(pattern, colnames(data), value = T)
if(length(names_data) == 0) stop("Dependent variables should begin with 'y_', independent variables with 'x_'")
names_d <- paste(paste0("d",ndiffs), names_data, sep = "_")
data_diff <- data[, `:=`((names_d), (.SD - shift(.SD, ndiffs))),
by = panel_id,
.SDcols = names_data]
return(data_diff)
}
View(test)
test <- makeDIFFS(test, id, 1)
View(test)
hours_wages.dt <- data.table(hours_wages)
setcolorder(hours_wages.dt, c("id", "year", "y_lnhr", "x_lnwg", "x_kids",
"x_age", "x_agesq", "x_disab"))
setkey(hours_wages.dt, id, year)
# first difference the variables
names_hours_wages.dt <- grep("^y_|^x", colnames(hours_wages.dt), value = T)
names_d <- paste("d1", names_hours_wages.dt, sep = "_")
hours_wages.dt <- hours_wages.dt[, `:=`((names_d), (.SD - shift(.SD, 1))),
by = id, .SDcols = names_hours_wages.dt]
# Instruments: once lagged: kids, age, agesq and disab twice lagged:
# lnwg, kids, age, agesq and disab once lagged
names_l1 <- paste("l1", names_hours_wages.dt, sep = "_")
hours_wages.dt <- hours_wages.dt[, `:=`((names_l1), (shift(.SD, 1))), by = id,
.SDcols = names_hours_wages.dt]
# twice lagged
names_l2 <- paste("l2", names_hours_wages.dt, sep = "_")
hours_wages.dt <- hours_wages.dt[, `:=`((names_l2), (shift(.SD, 2))), by = id,
.SDcols = names_hours_wages.dt]
formula <- d_y_lnhr ~ 0 + d1_x_lnwg + d1_x_kids + d1_x_age + d1_x_agesq + d1_x_disab | 0 + l1_x_kids + l1_x_age + l1_x_agesq + l1_x_disab + l2_x_kids + l2_x_age + l2_x_agesq + l2_x_disab + l2_x_lnwg
hours_wages.2sls <- ivreg(formula, data = hours_wages.dt, x = T)
hours_wages.2sls$coefficients
formula <- d1_y_lnhr ~ 0 + d1_x_lnwg + d1_x_kids + d1_x_age + d1_x_agesq + d1_x_disab | 0 + l1_x_kids + l1_x_age + l1_x_agesq + l1_x_disab + l2_x_kids + l2_x_age + l2_x_agesq + l2_x_disab + l2_x_lnwg
hours_wages.2sls <- ivreg(formula, data = hours_wages.dt, x = T)
hours_wages.2sls$coefficients
#' Lag multiple variables
#'
#' Create \emph{n}-lagged independent and dependent variables in a data frame. Assumes dependent variable names begin with "y_" and independent variable names begin with "x_". This makes it easier to lag many variables at once. If you variables are not so named, you can rename them with \code{panelGMM::renameVars}.
#'
#' @author Lawrence R De Geest, \email{lrdegeest@@gmail.com}
#' @param data data of class data.frame
#' @param panel the panel or cross-section variable name in the provided data
#' @param nlags the number of lags (e.g. 1, 2, ...)
#' @param x difference the indenpendent variables (defaults to TRUE)
#' @param y difference the indenpendent variables (defaults to TRUE)
#' @return \code{data.table} with lagged variables
#' @note Requires \code{library(data.table)}. The function will automatically coerce the data.frame object to \code{data.table}. Note that \code{data.table} objects retain their \code{data.frame} class.
#' @export
#' @examples
#' # Using the hours and wages data provided by the panelGMM package:
#' data("hours_wages", package = "panelGMM")
#' # twice lag the independent variables:
#' hours_wages_gmm <- makeLAGS(hours_wages, id, 2, y = FALSE)
makeLAGS <- function(data, panel, nlags, x = TRUE, y = TRUE) {
if(!(x) && !(y)) stop("Please select independent and/or dependent variables to lag.")
require(data.table)
if(class(data)[1] != "data.table") data <- data.table(data)
input <- match.call()
panel_id <- input[["panel"]]
if(!(x) && (y)) pattern <- "^y_"
else if((x) && !(y)) pattern <- "^x_"
else pattern <- "^y_|^x_"
names_data <- grep(pattern, colnames(data), value = T)
names_lag <- paste(paste0("l",nlags), names_data, sep = "_")
data_lag <- data[, `:=`((names_lag), (shift(.SD, nlags))),
by = panel_id,
.SDcols = names_data]
return(data_lag)
}
rm(list = ls())
#' Lag multiple variables
#'
#' Create \emph{n}-lagged independent and dependent variables in a data frame. Assumes dependent variable names begin with "y_" and independent variable names begin with "x_". This makes it easier to lag many variables at once. If you variables are not so named, you can rename them with \code{panelGMM::renameVars}.
#'
#' @author Lawrence R De Geest, \email{lrdegeest@@gmail.com}
#' @param data data of class data.frame
#' @param panel the panel or cross-section variable name in the provided data
#' @param nlags the number of lags (e.g. 1, 2, ...)
#' @param x difference the indenpendent variables (defaults to TRUE)
#' @param y difference the indenpendent variables (defaults to TRUE)
#' @return \code{data.table} with lagged variables
#' @note Requires \code{library(data.table)}. The function will automatically coerce the data.frame object to \code{data.table}. Note that \code{data.table} objects retain their \code{data.frame} class.
#' @export
#' @examples
#' # Using the hours and wages data provided by the panelGMM package:
#' data("hours_wages", package = "panelGMM")
#' # twice lag the independent variables:
#' hours_wages_gmm <- makeLAGS(hours_wages, id, 2, y = FALSE)
makeLAGS <- function(data, panel, nlags, x = TRUE, y = TRUE) {
if(!(x) && !(y)) stop("Please select independent and/or dependent variables to lag.")
require(data.table)
if(class(data)[1] != "data.table") data <- data.table(data)
input <- match.call()
panel_id <- input[["panel"]]
if(!(x) && (y)) pattern <- "^y_"
else if((x) && !(y)) pattern <- "^x_"
else pattern <- "^y_|^x_"
names_data <- grep(pattern, colnames(data), value = T)
names_lag <- paste(paste0("l",nlags), names_data, sep = "_")
data_lag <- data[, `:=`((names_lag), (shift(.SD, nlags))),
by = panel_id,
.SDcols = names_data]
return(data_lag)
}
#' Difference multiple variables
#'
#' Create \emph{n}-differenced independent and dependent variables in a data frame. Assumes dependent variable names begin with "y_" and independent variable names begin with "x_". This makes it easier to difference many variables at once. If you variables are not so named, you can rename them with \code{panelGMM::renameVars}.
#'
#' @author Lawrence R De Geest, \email{lrdegeest@@gmail.com}
#' @param data data of class data.frame
#' @param panel the panel or cross-section variable name in the provided data
#' @param ndiffs the number of differences (e.g. 1, 2, ...)
#' @param x difference the indenpendent variables (defaults to TRUE)
#' @param y difference the indenpendent variables (defaults to TRUE)
#' @return \code{data.table} with differenced variables
#' @note Requires \code{library(data.table)}. The function will automatically coerce the data.frame object to \code{data.table}. Note that \code{data.table} objects retain their \code{data.frame} class.
#' @export
#' @examples
#' # Using the hours and wages data provided by the panelGMM package:
#' data("hours_wages", package = "panelGMM")
#' # first difference all variables
#' hours_wages_gmm <- makeDIFFS(hours_wages, id, 1)
makeDIFFS <- function(data, panel, ndiffs, x = TRUE, y = TRUE) {
if(!(x) && !(y)) stop("Please select independent and/or dependent variables to difference")
require(data.table)
if(class(data)[1] != "data.table") data <- data.table(data)
input <- match.call()
panel_id <- input[["panel"]]
if(!(x) && (y)) pattern <- "^y_"
else if((x) && !(y)) pattern <- "^x_"
else pattern <- "^y_|^x_"
names_data <- grep(pattern, colnames(data), value = T)
if(length(names_data) == 0) stop("Dependent variables should begin with 'y_', independent variables with 'x_'")
names_d <- paste(paste0("d",ndiffs), names_data, sep = "_")
data_diff <- data[, `:=`((names_d), (.SD - shift(.SD, ndiffs))),
by = panel_id,
.SDcols = names_data]
return(data_diff)
}
#' Generalized Method of Moments (GMM) for panel data
#'
#' Fit one-step and two-step GMM models for panel data with lagged instrumental variables. Provides panel-robust standard errors allowing for heteroskedasticity and correlation over time.
#'
#' @author Lawrence R De Geest, \email{lrdegeest@@gmail.com}
#' @param formula specification of the regression relationship
#' @param instruments set of variables to instrument for the independent variables
#' @param time the name of the time series variable in the provided data
#' @param nlags the highest number of lags in the instruments
#' @param twostep estimate a two-step GMM model. Defaults to FALSE.
#' @param data data of class data.frame
#' @return model object of generic class "list" containing the following elements:
#' \item{\code{coefficients}}{the estimated coefficients}
#' \item{\code{fitted.values}}{predicted values of the dependent variable}
#' \item{\code{residuals}}{the residuals}
#' \item{\code{standard.errors}}{the panel-robust standard errors for the estimated coefficients}
#' \item{\code{RMSE}}{the root mean squared error}
#' \item{\code{pvalues}}{the p-values for the estimated coefficients}
#' \item{\code{y}}{a vector of the model's dependent variable}
#' \item{\code{x}}{the model's independent variables and matrices, each in their own matrix}
#' \item{\code{results}}{a \code{data.frame} of the results: coefficients, standard errors and p-values}
#' \item{\code{call}}{the model call}
#' \item{\code{formula}}{the model formula}
#' \item{\code{terms}}{a list with elements "regressors" and "instruments" containing the terms objects for the respective components}
#' \item{\code{levels}}{levels of the categorical regressors}
#' \item{\code{summary}}{a list object summarizing the model: the model call, the results (\code{results}), the RMSE, and if \code{twostep = TRUE}, the OIR test statistic and p-value.}
#' @references Cameron, A. Colin, and Pravin K. Trivedi. Microeconometrics: methods and applications. Cambridge university press, 2005.
#' @export
#' @examples
#' # Using the hours and wages data provided by the panelGMM package:
#' data("hours_wages", package = "panelGMM")
#' model <- panelGMM(d_y_lnhr ~ 0 + d_x_lnwg + d_x_kids + d_x_age + d_x_agesq + d_x_disab
#'       | 0 + l1_x_kids + l1_x_age + l1_x_agesq + l1_x_disab + l2_x_kids + l2_x_age + l2_x_agesq + l2_x_disab + l2_x_lnwg,
#'       time = year,
#'       nlags = 2,
#'       twostep = T,
#'      data = hours_wages_gmm)
#' model$summary
panelGMM <- function (formula, instruments, time, nlags, twostep = FALSE, data) {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula", "time", "data"), names(mf), 0)
mf <- mf[c(1, m)]
mf$drop.unused.levels <- TRUE
if (!missing(instruments)) {
formula <- Formula::as.Formula(formula, instruments)
cl$instruments <- NULL
cl$formula <- formula(formula)
}
else {
formula <- Formula::as.Formula(formula)
}
mf$formula <- formula
mf[[1]] <- as.name("model.frame")
mf <- eval(mf, parent.frame())
y <- model.response(mf, "numeric")
mt <- terms(formula, data = data)
mtX <- terms(formula, data = data, rhs = 1)
X <- model.matrix(mtX, mf)
mtZ <- delete.response(terms(formula, data = data, rhs = 2))
Z <- model.matrix(mtZ, mf)
t <- length(unique(mf$`(time)`)) + nlags
W <- solve(crossprod(Z,Z))
beta <- crossprod(solve(crossprod(X,Z) %*% W %*% crossprod(Z,X)),(crossprod(X,Z) %*% W %*% crossprod(Z,y)))
cs <- seq(1, (nrow(data)/t), 1)
cst = rep(cs, each = (nrow(na.omit(data))/length(cs)))
r <- ncol(Z)
K <- ncol(X)
prediction <- X %*% beta
e <- y - prediction
getS <- function(instruments, residuals) {
ZuuZ <- lapply(cs, function(i) t(Z[cst == i, ]) %*% e[cst == i] %*% t(e[cst == i]) %*% Z[cst == i, ])
S <- matrix(apply(matrix(unlist(ZuuZ), ncol = r * r, byrow = T),
MAR = 2, FUN = sum), ncol = r, byrow = T)
return(S)
}
S <- getS(Z,e)
XZWZX <- crossprod(X,Z) %*% W %*% crossprod(Z,X)
XZWSWZX <- crossprod(X,Z) %*% W %*% S %*% t(W) %*% crossprod(Z,X)
var <- solve(XZWZX) %*% XZWSWZX %*% solve(XZWZX)
se <- sqrt(diag(var))
if(twostep){
beta <- crossprod(solve(crossprod(X,Z) %*% solve(S) %*% crossprod(Z,X)),(crossprod(X,Z) %*% solve(S) %*% crossprod(Z,y)))
prediction <- X %*% beta
e <- y - prediction
S2 <- getS(Z,e)
var <- solve(crossprod(X,Z) %*% (solve(S2)) %*% crossprod(Z,X))
se <- sqrt(diag(var))
Zu <- lapply(cs, function(i) t(Z[cst == i, ]) %*% e[cst == i])
uZ <- lapply(cs, function(i) t(e[cst == i]) %*% Z[cst == i, ])
Zu_mat <- matrix(apply(matrix(unlist(Zu), ncol = 1 * r, byrow = T), MAR = 2, FUN = sum), ncol = r, byrow = T)
uZ_mat <- matrix(apply(matrix(unlist(Zu), ncol = r * 1, byrow = T), MAR = 2, FUN = sum), ncol = 1, byrow = T)
OIR <- Zu_mat %*% solve(S2) %*% uZ_mat
OIR.pvalue <- pchisq(OIR, df = r - K, lower.tail = FALSE)
}
output <- list()
output$coefficients <- beta
output$fitted.values <- prediction
output$residuals <- as.matrix(e)
output$standard.errors <- as.matrix(se)
output$RMSE <- round(sqrt(mean(output$residuals^2)), 3)
output$pvalues <- pnorm(-abs(output$coefficients) / output$standard.errors)*2
output$y <- y
output$x <- list(regressors = X, instruments = Z, projected = output$x)
output$results <- with(output, data.frame("Estimated coefficient" = coefficients, "Standard error" = standard.errors, "p-value" = pvalues))
output$results <- data.frame(apply(output$results, MARGIN = 2, function(x) round(x,4)))
output$call <- cl
output$formula <- formula(formula)
output$terms <- list(regressors = mtX, instruments = mtZ, full = mt)
output$levels <- .getXlevels(mt, mf)
if(twostep){
output$OIR <- paste0(round(OIR,3), " ", paste0("(p = ", round(OIR.pvalue, 3), ")"))
output$summary <- with(output, list("Call" = call, "Model" = formula, "Results" = results, "RMSE" = RMSE, OIR = OIR))
} else {
output$summary <- with(output, list("Call" = call, "Model" = formula, "Results" = results, "RMSE" = RMSE))
}
return(output)
}
load("/Users/LawrenceDeGeest/Desktop/notebook/research/software/panelGMM/data/hours_wages.RData")
head(hours_wages)
#1. rename variables
hours_wages_gmm <- renameVars("lnhr", c("lnwg", "kids", "age", "agesq", "disab"), hours_wages)
names(hours_wages_gmm)
#2. first difference (independent & dependent variables)
hours_wages_gmm <- makeDIFFS(hours_wages_gmm, id, 1)
View(hours_wages_gmm)
#3. lag 1 (independent variables)
hours_wages_gmm <- makeLAGS(hours_wages_gmm, id, 1, y = FALSE)
#4. lag 2 (independent variables)
hours_wages_gmm <- makeLAGS(hours_wages_gmm, id, 2, y = FALSE)
View(hours_wages_gmm
)
#5. estimate two-step GMM
model <- d1_y_lnhr ~ 0 + d1_x_lnwg + d1_x_kids + d1_x_age + d1_x_agesq + d1_x_disab | 0 + l1_x_kids + l1_x_age + l1_x_agesq + l1_x_disab + l2_x_kids + l2_x_age + l2_x_agesq + l2_x_disab + l2_x_lnwg
estimation <- panelGMM(model, time = year, nlags = 2, twostep = T, data = hours_wages_gmm)
# view results
estimation$summary
estimation <- panelGMM(model, time = year, nlags = 2, twostep = F, data = hours_wages_gmm)
# view results
estimation$summary
#1. rename variables
hours_wages_gmm <- renameVars(hours_wages, "lnhr", c("lnwg", "kids", "age", "agesq", "disab"))
hours_wages_gmm <- renameVars(hours_wages, "lnhr", c("lnwg", "kids", "age", "agesq", "disab"))
head(hours_wages_gmm)
renameVars <- function(data, yvars, xvars) {
names <- colnames(data)
for(i in names) {
if(i %in% yvars) names[names == i] <- paste0("y_", i)
else if(i %in% xvars) names[names == i] <- paste0("x_", i)
}
colnames(data) <- names
return(data)
}
hours_wages_gmm <- renameVars(hours_wages, "lnhr", c("lnwg", "kids", "age", "agesq", "disab"))
head(hours_wages_gmm
)
rm(estimation)
rm(hours_wages)
rm(hours_wages_gmm)
rm(model)
load("/Users/LawrenceDeGeest/Desktop/notebook/research/software/panelGMM/data/hours_wages.RData")
head(hours_wages)
#1. rename variables
hours_wages_gmm <- renameVars(hours_wages, "lnhr", c("lnwg", "kids", "age", "agesq", "disab"))
#2. first difference (independent & dependent variables)
hours_wages_gmm <- makeDIFFS(hours_wages_gmm, id, 1)
#3. lag 1 (independent variables)
hours_wages_gmm <- makeLAGS(hours_wages_gmm, id, 1, y = FALSE)
#4. lag 2 (independent variables)
hours_wages_gmm <- makeLAGS(hours_wages_gmm, id, 2, y = FALSE)
#5. estimate two-step GMM
model <- d1_y_lnhr ~ 0 + d1_x_lnwg + d1_x_kids + d1_x_age + d1_x_agesq + d1_x_disab | 0 + l1_x_kids + l1_x_age + l1_x_agesq + l1_x_disab + l2_x_kids + l2_x_age + l2_x_agesq + l2_x_disab + l2_x_lnwg
estimation <- panelGMM(model, time = year, nlags = 2, twostep = T, data = hours_wages_gmm)
# view results
estimation$summary
getwd()
document()
document()
document()
document()
document()
document()
document()
# view results
estimation$summary
#0. data
load("hours_wages.RData")
#1. rename variables
hours_wages_gmm <- renameVars(hours_wages, "lnhr", c("lnwg", "kids", "age", "agesq", "disab"))
#2. first difference (independent & dependent variables)
hours_wages_gmm <- makeDIFFS(hours_wages_gmm, id, 1)
#3. lag 1 (independent variables)
hours_wages_gmm <- makeLAGS(hours_wages_gmm, id, 1, y = FALSE)
#4. lag 2 (independent variables)
hours_wages_gmm <- makeLAGS(hours_wages_gmm, id, 2, y = FALSE)
#5. estimate two-step GMM
model <- d1_y_lnhr ~ 0 + d1_x_lnwg + d1_x_kids + d1_x_age + d1_x_agesq + d1_x_disab | 0 + l1_x_kids + l1_x_age + l1_x_agesq + l1_x_disab + l2_x_kids + l2_x_age + l2_x_agesq + l2_x_disab + l2_x_lnwg
estimation <- panelGMM(model, time = year, nlags = 2, twostep = T, data = hours_wages_gmm)
# view results
estimation$summary
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
setwd("~/Desktop/notebook/research/software/StateACS/")
getwd()
list.files()
document()
setwd("~/Desktop/notebook/research/software/StateACS/")
